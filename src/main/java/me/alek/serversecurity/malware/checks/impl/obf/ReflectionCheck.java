package me.alek.serversecurity.malware.checks.impl.obf;

import me.alek.serversecurity.malware.enums.Risk;
import me.alek.serversecurity.malware.checks.AbstractInstructionCheck;
import me.alek.serversecurity.malware.checks.types.DetectionNode;
import me.alek.serversecurity.model.PluginProperties;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;

public class ReflectionCheck extends AbstractInstructionCheck implements DetectionNode {

    public ReflectionCheck() {
        super(MethodInsnNode.class);
    }

    @Override
    public boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return false;
    }

    @Override
    public boolean processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, File file, Path classPath) {
        MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;

        return methodInsnNode.owner.equals("java/lang/reflect/Method") && methodInsnNode.name.equals("invoke");
    }

    @Override
    public String getType() {
        return "Reflection";
    }

    @Override
    public Risk getRisk() {
        return Risk.LOW;
    }
}
