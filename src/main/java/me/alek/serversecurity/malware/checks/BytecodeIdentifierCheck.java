package me.alek.serversecurity.malware.checks;


import me.alek.serversecurity.utils.bytecodeidentifier.CharSerializer;
import me.alek.serversecurity.utils.bytecodeidentifier.LevenshteinDistanceRecursive;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;

import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;

public abstract class BytecodeIdentifierCheck extends BaseCheck {
    @Override
    public boolean processFileInJar(Path classPath, ClassNode classNode, File file, boolean isClass) {
        if (classNode == null) return false;

        ArrayList<AbstractInsnNode> instructions = new ArrayList<>();
        classNode.methods.forEach(method -> instructions.addAll(Arrays.asList(method.instructions.toArray())));

        if (instructions.size() < 25) return false;
        if (instructions.size() > 200) return false;

        StringBuilder bytecodeClassString = new StringBuilder();
        CharSerializer serializer = new CharSerializer();

        for (AbstractInsnNode abstractInsnNode : instructions) {
            int opcode = abstractInsnNode.getOpcode();
            if (opcode == -1) continue;
            bytecodeClassString.append(serializer.serializeInt(opcode));
        }

        LevenshteinDistanceRecursive metricsRecursive = new LevenshteinDistanceRecursive();
        int distance = metricsRecursive.calculate(bytecodeClassString.toString(), getBytecodeClassString());

        if (distance < 8) {
            return true;
        }
        return false;
    }

    public abstract String getBytecodeClassString();
}
