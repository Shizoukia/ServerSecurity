package me.alek.serversecurity.malware.checks.impl.known;


import me.alek.serversecurity.malware.BytecodeHelper;
import me.alek.serversecurity.malware.checks.AbstractInstructionCheck;
import me.alek.serversecurity.malware.checks.types.MalwareNode;
import me.alek.serversecurity.malware.enums.MalwareType;
import me.alek.serversecurity.model.PluginProperties;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

public class NewSkyRageCheck extends AbstractInstructionCheck implements MalwareNode {

    public NewSkyRageCheck() {
        super(MethodInsnNode.class);
    }

    private final List<String> variants = Arrays.asList(
            "aHR0cDovL2xvY2FsaG9zdDozMDAxL3BvbGljeS5qc29u",
            "kernel-certs-debug4917.log"
    );

    @Override
    public boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return false;
    }

    @Override
    public boolean processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, Path classPath) {
        String bytesFormatted = BytecodeHelper.getStringUsed(abstractInsnNode);
        if (bytesFormatted != null) {

            for (String variant : variants) {
                if (bytesFormatted.contains(variant)) {
                    return true;
                }
            }
        }
        return false;
    }

    @Override
    public MalwareType getType() {
        return MalwareType.NEW_SKYRAGE;
    }
}
