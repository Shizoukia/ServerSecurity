package me.alek.serversecurity.malware.checks;


import me.alek.serversecurity.model.PluginProperties;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;

public abstract class AbstractInstructionCheck extends BaseCheck {

    private final Class<? extends AbstractInsnNode>[] insnTypes;

    @SafeVarargs
    public AbstractInstructionCheck(Class<? extends AbstractInsnNode>... insnTypes) {
        this.insnTypes = insnTypes;
    }

    @Override
    public boolean processFileInJar(Path classPath, ClassNode classNode, File file, boolean isClass) {
        if (classNode == null) return false;
        for (MethodNode methodNode : classNode.methods) {
            for (AbstractInsnNode abstractInsnNode : methodNode.instructions.toArray()) {
                for (Class<? extends AbstractInsnNode> insnNode : insnTypes) {

                    if (insnNode != abstractInsnNode.getClass()) continue;

                    boolean detected = processAbstractInsn(methodNode, abstractInsnNode, classPath);
                    if (detected) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    @Override
    public boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return false;
    }

    public abstract boolean processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, Path classPath);
}
