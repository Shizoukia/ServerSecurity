package me.alek.serversecurity.malware.checks.impl.file;

import me.alek.serversecurity.malware.BytecodeHelper;
import me.alek.serversecurity.malware.enums.Risk;
import me.alek.serversecurity.malware.checks.AbstractInstructionCheck;
import me.alek.serversecurity.malware.checks.types.DetectionNode;
import me.alek.serversecurity.model.PluginProperties;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

public class SystemAccessCheck extends AbstractInstructionCheck implements DetectionNode {

    public SystemAccessCheck() {
        super(MethodInsnNode.class);
    }

    private List<String> bannedProperties = Arrays.asList(
            "java.home",
            "user.dir",
            "java.io.tmpdir",
            "user.home",
            "user.name"
            );

    @Override
    public boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return false;
    }

    private boolean check(String string) {
        for (String property : bannedProperties) {
            if (string.equals(property)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, Path classPath) {
        MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
        final String owner = methodInsnNode.owner;
        final String name = methodInsnNode.name;

        if (!name.equals("getProperty") || !owner.equals("java/lang/System")) {
            return false;
        }
        AbstractInsnNode previous = methodInsnNode.getPrevious();
        if (previous instanceof LdcInsnNode) {

            LdcInsnNode ldcInsnNode = (LdcInsnNode) previous;
            Object cst = ldcInsnNode.cst;

            if (!(cst instanceof String)) {
                return false;
            }
            return check((String)cst);
        }
        String encryptedString = BytecodeHelper.getStringUsed(methodInsnNode);
        if (encryptedString == null) {
            return false;
        }
        return check(encryptedString);
    }

    @Override
    public String getType() {
        return "System Access";
    }

    @Override
    public Risk getRisk() {
        return Risk.LOW;
    }

}
