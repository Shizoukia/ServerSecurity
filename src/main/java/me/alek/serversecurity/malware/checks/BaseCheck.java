package me.alek.serversecurity.malware.checks;

import me.alek.serversecurity.malware.checks.types.DetectionNode;
import me.alek.serversecurity.malware.checks.types.MalwareNode;
import me.alek.serversecurity.malware.model.result.CheckResult;
import me.alek.serversecurity.malware.CacheContainer;
import me.alek.serversecurity.malware.model.result.MalwareCheckResult;
import me.alek.serversecurity.model.PluginProperties;
import me.alek.serversecurity.utils.ZipUtils;
import org.objectweb.asm.tree.ClassNode;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Iterator;
import java.util.stream.Stream;

public abstract class BaseCheck {

    public boolean resolve(Path rootFolder, String path) {
        return Files.exists(rootFolder.resolve(path));
    }

    public abstract boolean processFileInJar(Path classPath, ClassNode classNode, File file, boolean isClass);

    public abstract boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties);

    public boolean isServersideCheck() {
        return false;
    }

    public CheckResult processSingle(File file, Path rootFolder, CacheContainer cache, PluginProperties properties) {
        Stream<Path> validClasses = ZipUtils.walkThroughFiles(rootFolder);
        Iterator<Path> validClassIterator = validClasses.iterator();

        if (preProcessJAR(file, rootFolder, properties)) {
            return getCheck(this);
        }

        while (validClassIterator.hasNext()) {
            Path classPath = validClassIterator.next();
            boolean validClassPath = ZipUtils.validClassPath(classPath);

            ClassNode classNode = cache.fetchClass(file.toPath(), classPath);

            if (processFileInJar(classPath, classNode, file, validClassPath)) {
                return getCheck(this);
            }
        }
        return null;
    }

    public static CheckResult getCheck(BaseCheck handler) {
        if (handler instanceof DetectionNode) {
            DetectionNode node = (DetectionNode) handler;
            return new CheckResult(node.getType(), node.getRisk());
        }
        if (handler instanceof MalwareNode) {
            MalwareNode node = (MalwareNode) handler;
            return new MalwareCheckResult(node.getType());
        }
        return null;
    }

}
