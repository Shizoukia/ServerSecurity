package me.alek.serversecurity.malware.checks;

import me.alek.serversecurity.utils.Utils;
import me.alek.serversecurity.malware.CacheContainer;
import me.alek.serversecurity.malware.constants.obfuscation.AcceptedLibrariesObf;
import me.alek.serversecurity.malware.constants.obfuscation.AcceptedNameObf;
import me.alek.serversecurity.malware.constants.checks.Obfuscation;
import me.alek.serversecurity.malware.enums.Risk;
import me.alek.serversecurity.malware.checks.types.DetectionNode;
import me.alek.serversecurity.malware.model.FeatureResponse;
import me.alek.serversecurity.model.PluginProperties;
import me.alek.serversecurity.malware.model.result.CheckResult;
import me.alek.serversecurity.malware.obfuscation.AbstractObfHandler;
import me.alek.serversecurity.utils.ZipUtils;
import org.objectweb.asm.tree.ClassNode;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ObfuscationCheck extends BaseCheck implements DetectionNode {

    public static AcceptedNameObf.ObfContainer acceptedNameObfContainer = new AcceptedNameObf.ObfContainer();
    private final AcceptedLibrariesObf.LibrariesContainer checksumLibrariesContainer = new AcceptedLibrariesObf.LibrariesContainer();

    @Override
    public boolean processFileInJar(Path classPath, ClassNode classNode, File file, boolean isClass) {
        return false;
    }

    @Override
    public boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return false;
    }

    @Override
    public CheckResult processSingle(File file, Path rootFolder, CacheContainer cache, PluginProperties pluginProperties) {

        final Obfuscation.ObfContainer obfuscationContainer = new Obfuscation.ObfContainer();

        try {
            List<Path> libraries = Files.list(rootFolder).collect(Collectors.toList());
            double maxPercentage = 0;

            for (Path library : libraries) {

                if (!Files.isDirectory(library, LinkOption.NOFOLLOW_LINKS)) continue;
                if (library.getFileName().toString().equals("META-INF")) continue;

                Stream<Path> validClasses = ZipUtils.walkThroughFiles(library);
                Iterator<Path> validClassIterator = validClasses.iterator();

                double obfuscationLibraryCount = 0;
                double totalLibraryCount = 0;

                while (validClassIterator.hasNext()) {

                    Path classPath = validClassIterator.next();
                    if (checksumLibrariesContainer.check(classPath.toString())) continue;
                    if (!ZipUtils.validClassPath(classPath)) continue;

                    ClassNode classNode = cache.fetchClass(file.toPath(), classPath);
                    if (classNode == null) continue;

                    totalLibraryCount++;
                    int obfuscationClassCount = 0;

                    for (AbstractObfHandler feature : obfuscationContainer.getList()) {

                        for (Map.Entry<String, FeatureResponse> responseEntry : feature.check(classNode).entrySet()) {

                            FeatureResponse featureResponseModel = responseEntry.getValue();

                            if (!featureResponseModel.getFeedback()) continue;
                            if (!featureResponseModel.isRelevant()) continue;

                            Risk featureRisk = featureResponseModel.getFeatureRisk();
                            obfuscationClassCount += featureRisk.getObfuscationLevel();
                        }
                    }
                    if (obfuscationClassCount >= 2) {
                        obfuscationLibraryCount++;
                    }
                }
                double averagePercentage = Utils.arithmeticSecure(obfuscationLibraryCount, totalLibraryCount);
                if (Double.isNaN(averagePercentage))
                    continue;

                if (maxPercentage < averagePercentage)
                    maxPercentage = averagePercentage;
            }
            if (maxPercentage > 0.55) {
                return new CheckResult("Obfuscated", Risk.HIGH);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public String getType() {
        return "Obfuscation";
    }

    @Override
    public Risk getRisk() {
        return Risk.HIGH;
    }
}
