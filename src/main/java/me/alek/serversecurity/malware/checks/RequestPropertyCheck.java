package me.alek.serversecurity.malware.checks;



import me.alek.serversecurity.malware.BytecodeHelper;
import me.alek.serversecurity.malware.checks.types.DetectionNode;
import me.alek.serversecurity.model.PluginProperties;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Objects;

public abstract class RequestPropertyCheck extends AbstractInstructionCheck implements DetectionNode {

    public RequestPropertyCheck() {
        super(MethodInsnNode.class);
    }

    @Override
    public boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return false;
    }

    @Override
    public boolean processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, File file, Path classPath) {
        MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
        if (!methodInsnNode.name.equals("addRequestProperty")) return false;
        if (!(methodInsnNode.owner.equals("javax/net/ssl/HttpsURLConnection") || methodInsnNode.owner.equals("java/net/HttpURLConnection"))) return false;

        String[] param = BytecodeHelper.getStringsUsed(abstractInsnNode, 2);
        if (param == null) return false;
        if (Arrays.stream(param).filter(Objects::isNull).count() == param.length) return false;

        int i = 0;
        for (String paramCheck : getParams()) {
            if (!paramCheck.equals("")) {
                if (param[i] == null) return false;
                if (!param[i].equalsIgnoreCase(paramCheck)) return false;
            }
            i++;
        }
        return true;
    }

    public abstract String[] getParams();
}
