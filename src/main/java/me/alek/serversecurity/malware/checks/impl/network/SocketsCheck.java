package me.alek.serversecurity.malware.checks.impl.network;


import me.alek.serversecurity.malware.checks.AbstractInstructionCheck;
import me.alek.serversecurity.malware.checks.types.DetectionNode;
import me.alek.serversecurity.malware.enums.Risk;
import me.alek.serversecurity.model.PluginProperties;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;

public class SocketsCheck extends AbstractInstructionCheck implements DetectionNode {

    public SocketsCheck() {
        super(MethodInsnNode.class, LdcInsnNode.class);
    }

    @Override
    public boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return false;
    }

    private boolean isSocketSignature(String owner) {
        if (owner.equals("org/glassfish/tyrus/")) {
            return true;
        }
        if (owner.contains("javax/websocket/")) {
            return true;
        }
        if (owner.contains("org/springframework/web/socket")) {
            return true;
        }
        if (owner.equals("java/net/Socket") || owner.equals("java/net/DatagramSocket") ||owner.equals("java/net/MulticastSocket")) {
            return true;
        }
        if (owner.equals("java/nio/channels/ServerSocketChannel") || owner.equals("java/nio/channels/SocketChannel")) {
            return true;
        }
        return false;
    }

    @Override
    public boolean processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, File file, Path classPath) {
        if (abstractInsnNode instanceof MethodInsnNode) {
            MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;

            return isSocketSignature(methodInsnNode.owner);
        } else {
            LdcInsnNode ldcInsnNode = (LdcInsnNode) abstractInsnNode;
            Object value = ldcInsnNode.cst;

            if (!(value instanceof String)) {
                return false;
            }

            String asString = (String) value;
            return asString.contains("ws://");
        }
    }

    @Override
    public String getType() {
        return "Sockets";
    }

    @Override
    public Risk getRisk() {
        return Risk.MODERATE;
    }
}
