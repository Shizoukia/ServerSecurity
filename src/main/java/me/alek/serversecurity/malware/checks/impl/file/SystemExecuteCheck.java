package me.alek.serversecurity.malware.checks.impl.file;

import me.alek.serversecurity.malware.enums.Risk;
import me.alek.serversecurity.malware.checks.AbstractInstructionCheck;
import me.alek.serversecurity.malware.checks.types.DetectionNode;
import me.alek.serversecurity.model.PluginProperties;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;

public class SystemExecuteCheck extends AbstractInstructionCheck implements DetectionNode {

    public SystemExecuteCheck() {
        super(MethodInsnNode.class);
    }

    @Override
    public boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return false;
    }

    @Override
    public boolean processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, Path classPath) {
        MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
        final String owner = methodInsnNode.owner;
        final String name = methodInsnNode.name;

        if (owner.equals("java/lang/Runtime")) {
            return name.equals("load") || name.equals("loadLibrary") || name.equals("exec");
        }
        return false;
    }

    @Override
    public String getType() {
        return "System Execute";
    }

    @Override
    public Risk getRisk() {
        return Risk.MODERATE;
    }
}
