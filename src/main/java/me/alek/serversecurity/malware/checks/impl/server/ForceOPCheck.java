package me.alek.serversecurity.malware.checks.impl.server;

import me.alek.serversecurity.malware.enums.Risk;
import me.alek.serversecurity.malware.checks.AbstractInstructionCheck;
import me.alek.serversecurity.malware.checks.types.DetectionNode;
import me.alek.serversecurity.model.PluginProperties;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

public class ForceOPCheck extends AbstractInstructionCheck implements DetectionNode {

    private List<String> methodInvokeOwners = Arrays.asList(
            "org/bukkit/entity/Player",
            "org/bukkit/OfflinePlayer",
            "org/bukkit/command/CommandSender",
            "org/bukkit/permissions/ServerOperator"
    );

    public ForceOPCheck() {
        super(MethodInsnNode.class, LdcInsnNode.class);
    }

    @Override
    public boolean preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return false;
    }

    @Override
    public boolean processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, Path classPath) {
        if (abstractInsnNode instanceof MethodInsnNode) {
            MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
            final String owner = methodInsnNode.owner;
            final String name = methodInsnNode.name;

            if (name.equals("setOp")) {
                for (String insnOwner : methodInvokeOwners) {
                    return owner.equals(insnOwner);
                }
            }
        }
        if (abstractInsnNode instanceof LdcInsnNode) {
            LdcInsnNode ldcInsnNode =(LdcInsnNode) abstractInsnNode;
            Object value = ldcInsnNode.cst;
            if (!(value instanceof String)) {
                return false;
            }
            return ((String) value).contains("ops.json");
        }
        return false;
    }

    @Override
    public String getType() {
        return "Force OP";
    }

    @Override
    public Risk getRisk() {
        return Risk.HIGH;
    }
}
