package me.alek.serversecurity.malware.obfuscation;

import me.alek.serversecurity.malware.model.AttributeStatus;
import me.alek.serversecurity.malware.obfuscation.impl.AbstractMethodObfFeature;
import me.alek.serversecurity.malware.obfuscation.impl.AbstractObfFeature;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MethodObfLibrary extends BaseAbstractHandler {

    private final ArrayList<AbstractObfFeature> implementedAbstractMethodFeatures = new ArrayList<>();

    public MethodObfLibrary(AbstractObfFeature... implementedAbstractMethodFeatures) {
        this.implementedAbstractMethodFeatures.addAll(Arrays.asList(implementedAbstractMethodFeatures));
    }

    @Override
    public List<AbstractObfFeature> getImplementedFeatures() {
        return implementedAbstractMethodFeatures;
    }

    @Override
    public void affectAttributes(ClassNode classNode, AbstractObfFeature abstractObfFeature, AttributeStatus attributeStatusModel) {
        AbstractMethodObfFeature feature = (AbstractMethodObfFeature) abstractObfFeature;
        for (MethodNode method : classNode.methods) {
            feature.affectAttributeStatus(attributeStatusModel, method);
        }
    }
}
