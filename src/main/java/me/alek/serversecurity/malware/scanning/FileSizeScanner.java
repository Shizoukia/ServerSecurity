package me.alek.serversecurity.malware.scanning;

import org.objectweb.asm.tree.ClassNode;

import java.io.File;
import java.nio.file.Path;
import java.util.*;

public class FileSizeScanner extends JarBytecodeScanner<Map<String, Long>, Map.Entry<String, Long>> {

    public FileSizeScanner(List<File> files) {
        super(files, ScannerDelegateFactory.FILE_SIZE_SCANNER_FACTORY.get());
    }

    public FileSizeScanner(File file) {
        this(Collections.singletonList(file));
    }

    @Override
    public Comparator<Map<String, Long>> getComparator() {
        return null;
    }

    public static class FileSizeScannerRegistry implements ScannerEventually<Map<String, Long>, Map.Entry<String, Long>> {

        private final List<Map.Entry<String, Long>> fileSizes = new ArrayList<>();

        @Override
        public List<Map.Entry<String, Long>> getAllRegistered() {
            return fileSizes;
        }

        @Override
        public void register(Map.Entry<String, Long> value) {
            fileSizes.add(value);
        }

        @Override
        public void doAdding(List<Map<String, Long>> results) {
            Map<String, Long> map = new HashMap<>();
            for (Map.Entry<String, Long> entry : fileSizes) {
                map.put(entry.getKey(), entry.getValue());
            }
            results.add(map);
        }
    }

    public static class FileSizeScannerDelegate implements ScannerDelegate<Map<String, Long>, Map.Entry<String, Long>> {

        @Override
        public ScannerEventually<Map<String, Long>, Map.Entry<String, Long>> preHandleAndGetRegistry(File file, Path rootFolder) {
            return new FileSizeScannerRegistry();
        }

        @Override
        public void handle(ScannerEventually<Map<String, Long>, Map.Entry<String, Long>> registry, Path classPath, ClassNode classNode, File file, boolean validClassPath) {
            registry.register(new AbstractMap.SimpleEntry<>(file.getAbsolutePath(), file.length()));
        }

        @Override
        public void handlePostScan() {

        }

        @Override
        public void handlePreScan() {

        }
    }
}
