package me.alek.serversecurity.malware.scanning;

import me.alek.serversecurity.malware.model.ResultData;
import me.alek.serversecurity.malware.model.result.MalwareCheckResult;
import me.alek.serversecurity.lang.Lang;
import me.alek.serversecurity.malware.model.result.CheckResult;
import me.alek.serversecurity.utils.ScanUtils;
import me.alek.serversecurity.malware.enums.Risk;
import org.bukkit.command.CommandSender;

import java.io.File;
import java.util.*;

public class CachedVulnerabilityLoader {

    private final boolean deepScan;
    private final List<File> files;
    private final VulnerabilityScanner scanner;

    public CachedVulnerabilityLoader(List<File> files) {
        this(false, files, VulnerabilityScanner.latestScanner);
    }

    public CachedVulnerabilityLoader(boolean deepScan, List<File> files, VulnerabilityScanner scanner) {
        this.deepScan = deepScan;
        this.files = files;

        if (scanner == null) {
            this.scanner = new VulnerabilityScanner(files, false);
        }
        else {
            this.scanner = scanner;
        }
        // make sure they are done scanning
        this.scanner.await();
    }

    public void sendFeedback(CommandSender sender) {

        if (scanner.getResultData().isEmpty()) {
            sender.sendMessage(Lang.getMessageWithPrefix(Lang.SCANNING_ERROR_NO_RESULT));
            return;
        }
        sender.sendMessage(Lang.getMessageFormattedWithPrefix(Lang.SCANNING_STARTING, files.size()));

        int index = 0;
        int malwareFound = 0;

        for (ResultData data : scanner.getResultData()) {
            if (!files.contains(data.getFile())) continue;

            final List<CheckResult> results = data.getResults();
            final double level = data.getLevel();

            String append = "";
            if (!data.getFile().getParent().equalsIgnoreCase("plugins")) {
                append = " §7(" + data.getFile().getPath() + ")";
            }
            index++;

            if (results.stream().filter(Objects::isNull).count() == results.size()) {
                String msg = ScanUtils.getMessage(level, deepScan, data.getFile().getName());

                if (deepScan) {
                    sender.sendMessage("§a✓ " + data.getFile().getName() + append);
                    sender.sendMessage("§7" + index + ". " + msg);
                    sender.sendMessage("");
                } else {
                    sender.sendMessage("§7" + index + ". " + msg);
                }
                continue;
            }
            if (deepScan)
                sender.sendMessage(ScanUtils.getChatSymbol(level) + "§r" + ScanUtils.getChatColor(level) + data.getFile().getName() + append);

            AbstractMap.SimpleEntry<Risk, StringBuilder>[] riskStringBuilders = new AbstractMap.SimpleEntry[4];
            int i = 0;

            for (Risk risk : Risk.values()) {
                riskStringBuilders[i] = new AbstractMap.SimpleEntry<>(risk, new StringBuilder());
                i++;
            }

            boolean detected = false;
            boolean hasMalware = false;

            for (CheckResult result : results) {
                if (result == null) continue;

                if (result instanceof MalwareCheckResult) {
                    if (!hasMalware) malwareFound++;
                    hasMalware = true;
                }

                detected = true;
                Arrays.stream(riskStringBuilders)
                        .filter(entry -> entry.getKey() == result.getRisk())
                        .forEach(entry -> entry.getValue().append(", ").append(result.getDetection()));
            }
            if (detected && deepScan) {
                for (AbstractMap.SimpleEntry<Risk, StringBuilder> entry : riskStringBuilders) {

                    if (entry.getValue().length() < 3) continue;

                    sender.sendMessage(" §7- " + entry.getKey().getChatColor() + entry.getKey().getName() + ": §7" + entry.getValue().substring(2));
                }
            }
            String msg = ScanUtils.getMessage(level, deepScan, data.getFile().getName());
            sender.sendMessage("§7" + index + ". " + msg);

            if (deepScan) sender.sendMessage("");
        }
        if (scanner.getSize() > 5) {

            if (((float)scanner.getTotalFilesMalware()) / ((float)scanner.getSize()) >= 0.5) {
                sender.sendMessage(Lang.getMessage(Lang.SCANNING_WARN_MANY_INFECTED));
                sender.sendMessage("");
            }
        }
        sender.sendMessage(Lang.getMessageFormattedWithPrefix(Lang.SCANNING_DONE_CHAT, files.size(), malwareFound));

        if (scanner.isError()) {
            sender.sendMessage(Lang.getMessageWithPrefix(Lang.SCANNING_ERROR_UNKNOWN));
        }
    }
}
