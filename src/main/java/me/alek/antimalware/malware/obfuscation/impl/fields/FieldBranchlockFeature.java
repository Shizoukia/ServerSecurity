package me.alek.antimalware.malware.obfuscation.impl.fields;

import me.alek.antimalware.malware.enums.Risk;
import me.alek.antimalware.malware.model.AttributeStatus;
import me.alek.antimalware.malware.obfuscation.impl.AbstractFieldObfFeature;
import me.alek.antimalware.malware.obfuscation.impl.AbstractObfFeature;
import org.objectweb.asm.tree.FieldNode;

public class FieldBranchlockFeature extends AbstractObfFeature implements AbstractFieldObfFeature {

    @Override
    public void affectAttributeStatus(AttributeStatus attributeStatusModel, FieldNode field) {
        final String name = field.name;
        final Object value = field.value;

        if (name.toLowerCase().contains("branchlock")) {
            attributeStatusModel.incrementAbnormal();
        }
        if (value instanceof String) {
            if (((String)value).toLowerCase().contains("branchlock")) {
                attributeStatusModel.incrementAbnormal();
            }
        }
    }

    @Override
    public String getName() {
        return "Branchlock";
    }

    @Override
    public Risk getFeatureRisk() {
        return Risk.CRITICAL;
    }

    @Override
    public boolean feedback(AttributeStatus attributeStatusModel) {
        return attributeStatusModel.getAbnormalCount() > 0;
    }
}
