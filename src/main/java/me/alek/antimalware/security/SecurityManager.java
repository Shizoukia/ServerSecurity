package me.alek.antimalware.security;

import lombok.Getter;
import me.alek.antimalware.AntiMalwarePlugin;
import me.alek.antimalware.logging.LogHolder;
import me.alek.antimalware.security.blocker.ListenerRegistery;
import me.alek.antimalware.security.operator.OperatorInjector;
import me.alek.antimalware.security.operator.OperatorManager;
import org.bukkit.Bukkit;
import org.bukkit.Server;
import org.bukkit.command.SimpleCommandMap;
import org.bukkit.craftbukkit.v1_8_R3.CraftServer;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.SimplePluginManager;
import org.bukkit.scheduler.BukkitRunnable;
import org.objectweb.asm.*;
import org.objectweb.asm.tree.InsnList;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.VarInsnNode;

import java.lang.reflect.Field;
import java.lang.ClassLoader;

public class SecurityManager {

    @Getter
    private final AntiMalwarePlugin plugin;

    private final SecurityConfig securityConfig;
    @Getter
    private SecurityOptions options;

    public SecurityManager(AntiMalwarePlugin plugin) {
        this.plugin = plugin;
        this.securityConfig = new SecurityConfig(this);

        init();
    }

    public void generatePluginOptions() {
        final SecurityOptions options = new SecurityOptions(this.securityConfig);
        this.options = options;
        LogHolder.setup(options);
    }

    public void reload() {
        this.securityConfig.reload();
        AntiMalwarePlugin.getInstance().disableLoggingHandlers();
        new BukkitRunnable() {

            @Override
            public void run() {
                generatePluginOptions();
            }
        }.runTaskLater(AntiMalwarePlugin.getInstance(), 10L);
    }

    private void init() {
        generatePluginOptions();
        PluginManager pluginManager = Bukkit.getPluginManager();
        if (this.options.isPreventCancelledMaliciousChatEvents()) {
            try {
                /*PluginManager wrappedPluginManager = new WrappedPluginManager(Bukkit.getPluginManager());
                Field pluginManagerField = ((CraftServer)Bukkit.getServer()).getClass().getDeclaredField("pluginManager");
                pluginManagerField.setAccessible(true);
                pluginManagerField.set(Bukkit.getServer(), wrappedPluginManager);*/

                byte[] modifiedBytecode = modifySimplePluginManager(pluginManager);
                SimplePluginManager newPluginManager = (SimplePluginManager) createModifiedSimplePluginManager(modifiedBytecode);

                Field pluginManagerField = ((CraftServer)Bukkit.getServer()).getClass().getDeclaredField("pluginManager");
                pluginManagerField.setAccessible(true);
                pluginManagerField.set(Bukkit.getServer(), newPluginManager);

                OperatorInjector operatorInjector = new OperatorInjector(OperatorManager.get());
                operatorInjector.inject();

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        new ListenerRegistery(this, pluginManager);
    }


    private byte[] modifySimplePluginManager(PluginManager pluginManager) {
        try {
            ClassReader classReader = new ClassReader(pluginManager.getClass().getName());

            ClassWriter classWriter = new ClassWriter(classReader, ClassWriter.COMPUTE_MAXS);
            ClassVisitor classVisitor = new ClassVisitorInjector(classWriter);

            classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);

            return classWriter.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private PluginManager createModifiedSimplePluginManager(byte[] modifiedBytecode) throws Exception {
        ClassLoader classLoader = new ClassLoader() {
            @Override
            protected Class<?> findClass(String name) throws ClassNotFoundException {
                if (SimplePluginManager.class.getName().equals(name)) {
                    return defineClass(name, modifiedBytecode, 0, modifiedBytecode.length);
                }
                return super.findClass(name);
            }
        };
        Class<?> modifiedClass = classLoader.loadClass(SimplePluginManager.class.getName());

        return (PluginManager) modifiedClass.getDeclaredConstructor(Server.class, SimpleCommandMap.class).newInstance(Bukkit.getServer(), getCommandMap());
    }

    private SimpleCommandMap getCommandMap() {
        try {
            final Field bukkitCommandMap = Bukkit.getServer().getClass().getDeclaredField("commandMap");
            bukkitCommandMap.setAccessible(true);

            return (SimpleCommandMap) bukkitCommandMap.get(Bukkit.getServer());
        } catch(Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private static class ClassVisitorInjector extends ClassVisitor {
        public ClassVisitorInjector(ClassVisitor cv) {
            super(Opcodes.ASM9, cv);
        }

        @Override
        public MethodVisitor visitMethod(
                int access,
                String name,
                String desc,
                String signature,
                String[] exceptions) {
            if (name.equals("callEvent") && desc.equals("(Lorg/bukkit/event/Event;)V")) {
                MethodVisitor mv = visitMethod(access, name, desc, signature, exceptions);
                return new MethodVisitorInjector(mv);
            }
            return super.visitMethod(access, name, desc, signature, exceptions);
        }
    }

    private static class MethodVisitorInjector extends MethodVisitor {

        private final MethodVisitor delegate;

        public MethodVisitorInjector(MethodVisitor mv) {
            super(Opcodes.ASM9, mv);
            this.delegate = mv;
        }

        @Override
        public void visitCode() {
            InsnList insnList = new InsnList();
            insnList.add(new VarInsnNode(Opcodes.ALOAD, 0));
            insnList.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL, "me/alek/antimalware/security/SecurityManager", "testEvent", "()V", false));
            insnList.accept(delegate);
            super.visitCode();
        }

    }

    public void testEvent() {
        Bukkit.broadcastMessage("DET VIRKER!!!");
    }

}
