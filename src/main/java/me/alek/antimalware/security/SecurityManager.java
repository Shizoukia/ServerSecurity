package me.alek.antimalware.security;

import me.alek.antimalware.AntiMalwarePlugin;
import me.alek.antimalware.logging.LogHolder;
import me.alek.antimalware.security.blocker.ListenerRegistery;
import me.alek.antimalware.security.operator.OperatorInjector;
import me.alek.antimalware.security.operator.OperatorManager;
import me.alek.antimalware.utils.Utils;
import org.bukkit.Bukkit;
import org.bukkit.plugin.PluginManager;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.concurrent.CompletableFuture;

public class SecurityManager {

    private final AntiMalwarePlugin plugin;
    private final SecurityConfig securityConfig;
    private SecurityOptions options;
    private static SecurityManager instance;

    public static SecurityManager getInstance() {
        return instance;
    }

    public SecurityOptions getOptions() {
        return options;
    }

    public SecurityManager(AntiMalwarePlugin plugin) {
        instance = this;
        this.plugin = plugin;
        this.securityConfig = new SecurityConfig(this);

        init();
    }

    public void generatePluginOptions() {
        final SecurityOptions options = new SecurityOptions(this.securityConfig);
        this.options = options;

        Utils.runTaskLater(20L, () -> LogHolder.setup(options));
    }

    public void reload() {
        this.securityConfig.reload();
        new BukkitRunnable() {

            @Override
            public void run() {
                generatePluginOptions();
            }
        }.runTaskLater(AntiMalwarePlugin.getInstance(), 10L);
    }

    private void init(){
        generatePluginOptions();
        PluginManager pluginManager = Bukkit.getPluginManager();
        if (this.options.isPreventCancelledMaliciousChatEvents()) {
            try {
                OperatorInjector operatorInjector = new OperatorInjector(OperatorManager.get());
                operatorInjector.inject();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        new ListenerRegistery(this, pluginManager);
    }


}
