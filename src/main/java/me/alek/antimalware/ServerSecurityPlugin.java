package me.alek.antimalware;

import me.alek.antimalware.command.commands.MainCommand;
import me.alek.antimalware.configuration.Configuration;
import me.alek.antimalware.logging.AbstractLogger;
import me.alek.antimalware.logging.LogHolder;
import me.alek.antimalware.metrics.Metrics;
import me.alek.antimalware.network.NetworkInterceptor;
import me.alek.antimalware.malware.scanning.Scanner;
import me.alek.antimalware.security.SecurityManager;
import me.alek.antimalware.utils.Appender;
import me.alek.antimalware.utils.JARFinder;
import me.alek.antimalware.utils.UpdateChecker;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;

import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Logger;

public class ServerSecurityPlugin extends JavaPlugin implements Listener {

    private static ServerSecurityPlugin instance;
    private static SecurityManager securityManager;
    private static Configuration configuration;
    private static NetworkInterceptor interceptor;
    private static String latestVersion = null;

    @Override
    public void onEnable() {
        instance = this;

        // setup configuration
        configuration = new Configuration();

        // setup security manager
        securityManager = new SecurityManager(this);

        // setup network interceptor
        interceptor = new NetworkInterceptor(this);
        interceptor.enable();

        // check latest updates
        new UpdateChecker(this, 109025).getLatestVersion(version -> {
            if (!this.getDescription().getVersion().equals(version)) {
                getLogger().info("[AntiMalware] Fandt en opdatering: v" + version + ". Download:");
                getLogger().info("https://www.spigotmc.org/resources/antimalware.109025/");
                latestVersion = version;
            }
        });
        // setup metrics
        Metrics metrics = new Metrics(this, 18393);

        // setup commands
        this.getCommand("am").setExecutor(new MainCommand());

        // setup listeners
        this.getServer().getPluginManager().registerEvents(this, this);

        Logger logger = Logger.getLogger("Minecraft");
        logger.info("[AntiMalware] AntiMalware er nu loadet! Pluginnet er lavet af Alek05. Brug /am.");

        // scan the plugins of the server
        File dataFolder = ServerSecurityPlugin.get().getDataFolder().getParentFile();
        new BukkitRunnable() {
            @Override
            public void run() {
                final Appender whenDone = new Appender();
                final Scanner scanner = new Scanner(JARFinder.findAllJars(dataFolder));
                whenDone.setRequest(() -> {
                    if (scanner.hasMalware()) {
                        Bukkit.getOnlinePlayers()
                                .stream()
                                .filter(Player::isOp)
                                .forEach(player -> {
                                    player.sendMessage("§8[§6AntiMalware§8] §7Auto-scanner plugins for backdoors...");
                                    player.sendMessage("§8[§6AntiMalware§8] §cDer er fundet virus i et plugin, som kan være en potentiel backdoor! Brug /am deepscan for mere information!");
                                    player.sendMessage("§8[§6AntiMalware§8] §cOBS: Læs det ovenstående for serverens sikkerhed. Backdoor i plugins kan føre til grief!");
                                });
                    }
                });
                scanner.startScan(whenDone);
            }
        }.runTaskTimerAsynchronously(this, 0L, 36000L);
    }

    @Override
    public void onDisable() {
        interceptor.disable();

        disableLoggerContexts();
    }

    public void disableLoggerContexts() {
        List<AbstractLogger> loggers = Arrays.asList(
                LogHolder.getOPLogger(), LogHolder.getSecurityLogger(), LogHolder.getScanLogger()
        );
        for (AbstractLogger logger : loggers) {
            if (logger != null) {

                logger.getContext().stop();
            }
        }
    }

    @EventHandler
    public void onJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        if (!player.isOp()) return;
        if (latestVersion != null) {
            new BukkitRunnable() {

                @Override
                public void run() {
                    player.sendMessage("§8[§6AntiMalware§8] §7Fandt en opdatering: v" + latestVersion + "§7. Download:");
                    player.sendMessage("§ahttps://www.spigotmc.org/resources/antimalware.109025/");
                }
            }.runTaskLater(this, 60L);
        }
        Scanner latestScanner = Scanner.latestScanner;
        if (latestScanner != null && latestScanner.hasMalware()) {
            player.sendMessage("§8[§6AntiMalware§8] §cDer er fundet virus i et plugin, som kan være en potentiel backdoor! Brug /am deepscan for mere information!");
            player.sendMessage("§8[§6AntiMalware§8] §cOBS: Læs det ovenstående for serverens sikkerhed. Backdoor i plugins kan føre til grief!");
        }
    }

    public static ServerSecurityPlugin get() {
        return instance;
    }

    public SecurityManager getSecurityManager() {
        return securityManager;
    }

    public Configuration getConfiguration() {
        return configuration;
    }

}

