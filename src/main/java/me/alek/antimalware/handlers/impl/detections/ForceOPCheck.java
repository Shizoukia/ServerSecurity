package me.alek.antimalware.handlers.impl.detections;

import me.alek.antimalware.constants.falsepositives.AcceptedPluginsForceOP;
import me.alek.antimalware.enums.Risk;
import me.alek.antimalware.handlers.types.AbstractInstructionHandler;
import me.alek.antimalware.handlers.types.ParseHandler;
import me.alek.antimalware.handlers.types.nodes.DetectionNode;
import me.alek.antimalware.model.Pair;
import me.alek.antimalware.model.PluginProperties;
import org.bukkit.Bukkit;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

public class ForceOPCheck extends AbstractInstructionHandler implements DetectionNode, ParseHandler {

    private List<String> methodInvokeOwners;
    private PluginProperties pluginProperties;
    private AcceptedPluginsForceOP.ForceOPContainer acceptedForceOPContainer;

    @Override
    public void parse() {
        if (methodInvokeOwners != null) return;
        acceptedForceOPContainer = new AcceptedPluginsForceOP.ForceOPContainer();
        methodInvokeOwners = Arrays.asList(
                "org/bukkit/entity/Player",
                "org/bukkit/OfflinePlayer",
                "org/bukkit/command/CommandSender",
                "org/bukkit/permissions/ServerOperator"
        );
    }

    public ForceOPCheck() {
        super(MethodInsnNode.class, LdcInsnNode.class);
    }

    @Override
    public Pair<String, String> preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        this.pluginProperties = pluginProperties;
        return null;
    }

    public List<String> getMethodInvokeOwners() {
        return methodInvokeOwners;
    }

    public static boolean validatePluginAcceptance(String plugin, List<String> checks) {
        for (String checkString : checks) {
            if (plugin.toLowerCase().contains(checkString.toLowerCase())) {
                return true;
            }
        }
        return false;
    }

    private boolean validatePluginAcceptance() {
        if (pluginProperties == null) return false;
        if (pluginProperties.getPluginName() == null) return false;

        return validatePluginAcceptance(pluginProperties.getPluginName(), acceptedForceOPContainer.getList());
    }

    @Override
    public String processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, Path classPath) {
        if (validatePluginAcceptance()) {
            return null;
        }
        if (abstractInsnNode instanceof MethodInsnNode) {
            MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
            final String owner = methodInsnNode.owner;
            final String name = methodInsnNode.name;

            if (name.equals("setOp")) {
                for (String insnOwner : methodInvokeOwners) {
                    if (owner.equals(insnOwner)) {
                        return "";
                    }
                    return null;
                }
            }
        }
        if (abstractInsnNode instanceof LdcInsnNode) {
            LdcInsnNode ldcInsnNode =(LdcInsnNode) abstractInsnNode;
            Object value = ldcInsnNode.cst;
            if (!(value instanceof String)) {
                return null;
            }
            if (!((String)value).contains("ops.json")) {
                return null;
            }
            return "ops.json";

        }
        return null;
    }

    @Override
    public String getType() {
        return "Force OP";
    }

    @Override
    public Risk getRisk() {
        return Risk.HIGH;
    }
}
