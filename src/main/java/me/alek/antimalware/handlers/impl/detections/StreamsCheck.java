package me.alek.antimalware.handlers.impl.detections;

import me.alek.antimalware.enums.Risk;
import me.alek.antimalware.handlers.types.AbstractInstructionHandler;
import me.alek.antimalware.handlers.types.OnlySourceLibraryHandler;
import me.alek.antimalware.handlers.types.nodes.DetectionNode;
import me.alek.antimalware.model.Pair;
import me.alek.antimalware.model.PluginProperties;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.nio.file.Path;

public class StreamsCheck extends AbstractInstructionHandler implements DetectionNode, OnlySourceLibraryHandler {

    public StreamsCheck() {
        super(MethodInsnNode.class);
    }

    @Override
    public Pair<String, String> preProcessJAR(File file, Path rootFolder, PluginProperties pluginProperties) {
        return null;
    }

    @Override
    public String processAbstractInsn(MethodNode methodNode, AbstractInsnNode abstractInsnNode, Path classPath) {
        MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
        final String owner = methodInsnNode.owner;
        final String name = methodInsnNode.name;

        if ((owner.equals("java/io/FileInputStream") || owner.equals("java/io/FileOutputStream")) && name.equals("<init>")) {
            return "";
        }
        if (owner.equals("org/apache/commons/io/FileUtils") && (name.equals("openInputStream") || name.equals("openOutputStream"))) {
            return "";
        }
        if (owner.equals("com/google/common/io/Files") && (name.equals("asByteSource") || name.equals("asByteSink"))) {
            return "";
        }
        if ((owner.equals("java/io/ByteArrayInputStream") || owner.equals("java/io/ByteArrayOutputStream")) && name.equals("<init>")) {
            return "";
        }
        if ((owner.equals("java/io/DataInputStream") || owner.equals("java/io/DataOutputStream")) && name.equals("<init>")) {
            return "";
        }
        if ((owner.equals("java/io/ObjectInputStream") || owner.equals("java/io/ObjectOutputStream")) && name.equals("<init>")) {
            return "";
        }
        if ((owner.equals("java/io/BufferedInputStream") || owner.equals("java/io/BufferedOutputStream")) && name.equals("<init>")) {
            return "";
        }
        return null;
    }

    @Override
    public String getType() {
        return "Streams";
    }

    @Override
    public Risk getRisk() {
        return Risk.LOW;
    }
}
